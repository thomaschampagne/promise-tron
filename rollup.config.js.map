{"version":3,"file":"rollup.config.js","sourceRoot":"","sources":["rollup.config.ts"],"names":[],"mappings":";;AAAA,iEAAkD;AAClD,6DAA8C;AAC9C,uEAAiD;AACjD,qEAAiD;AACjD,qDAAsC;AAEtC,MAAM,GAAG,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAA;AAErC,MAAM,WAAW,GAAG,cAAc,CAAA;AAGlC;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,oBAAoB;AAEpB,kBAAe;IACb,KAAK,EAAE,OAAO,WAAW,KAAK;IAC9B,MAAM,EAAE;QACN;YACE,oBAAoB,CAAA,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO;SACpF;KAOF;IACD,yFAAyF;IACzF,QAAQ,EAAE,CAAC,UAAU,CAAC;IACtB,KAAK,EAAE;QACL,OAAO,EAAE,YAAY;KACtB;IACD,OAAO,EAAE;QACP,2BAA2B;QAC3B,2BAAU,CAAC;YACT,QAAQ,EAAE,iBAAiB;YAC3B,4BAA4B;YAC5B,oBAAoB;YACpB,oBAAoB;YACpB,0BAA0B;YAC1B,gBAAgB;YAChB,0BAA0B;YAC1B,mBAAmB;YACnB,wBAAwB;YACxB,wBAAwB;YACxB,EAAE;YACF,2BAA2B;YAC3B,iBAAiB;YACjB,sCAAsC;YACtC,mCAAmC;YACnC,kCAAkC;YAClC,0BAA0B;YAC1B,yBAAyB;YACzB,eAAe;YACf,0BAA0B;YAC1B,KAAK;YACL,sCAAsC;YACtC,OAAO,EAAE,CAAC,YAAY,CAAC;SACxB,CAAC;QACF,wBAAwB;QACxB,qBAAI,EAAE;QACN,6EAA6E;QAC7E,cAAc;QACd,yBAAQ,CAAC,EAAE,UAAU,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC;QACxC,sEAAsE;QACtE,kDAAkD;QAClD,6DAA6D;QAC7D,6BAAO,EAAE;QACT,6CAA6C;QAC7C,kCAAU,EAAE;KACb;CACF,CAAA","sourcesContent":["import typescript from '@rollup/plugin-typescript'\nimport commonjs from '@rollup/plugin-commonjs'\nimport sourceMaps from 'rollup-plugin-sourcemaps'\nimport resolve from '@rollup/plugin-node-resolve'\nimport json from '@rollup/plugin-json'\n\nconst pkg = require('./package.json')\n\nconst libraryName = 'promise-tron'\n\n\n/*export default {\n  input: `src/${libraryName}.ts`,\n  // output: {\n  //   dir: 'output',\n  //   name: libraryName,\n  //   format: 'cjs'\n  // },\n  output: [\n    {\n      file: pkg.main, name: libraryName, format: 'umd', sourcemap: true\n    },\n    {\n      file: pkg.module, format: 'es', sourcemap: true\n    }\n  ],\n  plugins: [\n    typescript({\n      // tsconfig: './tsconfig.json',\n      include: ['./src/!*.ts']\n    }),\n    commonjs({ extensions: ['ts'] })\n  ]\n}*/\n// console.warn(pkg)\n\nexport default {\n  input: `src/${libraryName}.ts`,\n  output: [\n    {\n      /*file: pkg.main, */name: libraryName, format: 'umd', sourcemap: true, dir: 'dist/'\n    },\n    // {\n    //   file: pkg.main, name: libraryName, format: 'umd', sourcemap: true\n    // },\n    // {\n    //   file: pkg.module, format: 'es', sourcemap: true\n    // }\n  ],\n  // Indicate here external modules you don't wanna include in your bundle (i.e.: 'lodash')\n  external: ['electron'],\n  watch: {\n    include: './src/*.ts'\n  },\n  plugins: [\n    // Compile TypeScript files\n    typescript({\n      tsconfig: './tsconfig.json',\n      // moduleResolution: 'Node',\n      // target: 'esnext',\n      // module: 'esnext',\n      // lib: ['esnext', 'dom'],\n      // strict: true,\n      // // inlineSources: true,\n      // sourceMap: true,\n      // declarationMap: true,\n      // // declaration: true,\n      //\n      // resolveJsonModule: true,\n      // allowJs: true,\n      // allowSyntheticDefaultImports: true,\n      // // experimentalDecorators: true,\n      // // emitDecoratorMetadata: true,\n      // // declarationDir: '.',\n      // // outDir: 'dist/lib',\n      // typeRoots: [\n      //   'node_modules/@types'\n      // ],\n      // declarationDir: './dist/lib/types',\n      include: ['./src/*.ts']\n    }),\n    // Allow json resolution\n    json(),\n    // Allow bundling cjs modules (unlike webpack, rollup doesn't understand cjs)\n    // commonjs(),\n    commonjs({ extensions: ['.js', '.ts'] }),\n    // Allow node_modules resolution, so you can use 'external' to control\n    // which external modules to include in the bundle\n    // https://github.com/rollup/rollup-plugin-node-resolve#usage\n    resolve(),\n    // Resolve source maps to the original source\n    sourceMaps()\n  ]\n}\n"]}