{"version":3,"file":"semantic-release-prepare.js","sourceRoot":"","sources":["semantic-release-prepare.ts"],"names":[],"mappings":";AAAA,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC5B,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,CAAA;AACzC,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAEhC,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACrD,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CACpB,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC,CAC5D,CAAA;AAED,GAAG,CAAC,OAAO,CAAC,OAAO,GAAG,oCAAoC,CAAA;AAC1D,GAAG,CAAC,OAAO,CAAC,SAAS,GAAG,gCAAgC,CAAA;AAExD,aAAa,CACX,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,cAAc,CAAC,EAC7C,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAC7B,CAAA;AAED,iCAAiC;AACjC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,cAAc,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAA;AAEpG,OAAO,CAAC,GAAG,EAAE,CAAA;AACb,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAA;AACnC,OAAO,CAAC,GAAG,EAAE,CAAA;AAEb,IAAI,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE;IAC7B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA;IACpC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC,CAAA;IACjE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC,CAAA;IACxD,OAAO,CAAC,GAAG,EAAE,CAAA;IACb,OAAO,CAAC,GAAG,CACT,MAAM,CAAC,IAAI,CAAC,wDAAwD,CAAC,CACtE,CAAA;IACD,OAAO,CAAC,GAAG,EAAE,CAAA;IACb,OAAO,CAAC,GAAG,CACT,MAAM,CAAC,IAAI,CACT,yEAAyE,CAC1E,CACF,CAAA;CACF;KAAM;IACL,OAAO,CAAC,GAAG,CACT,MAAM,CAAC,GAAG,CACR,qEAAqE,CACtE,CACF,CAAA;IACD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAA;IACrC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC,CAAA;IACjE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC,CAAA;IACxD,OAAO,CAAC,GAAG,EAAE,CAAA;IACb,OAAO,CAAC,GAAG,CACT,MAAM,CAAC,IAAI,CAAC,wDAAwD,CAAC,CACtE,CAAA;CACF;AAED,OAAO,CAAC,GAAG,EAAE,CAAA","sourcesContent":["const path = require(\"path\")\r\nconst { fork } = require(\"child_process\")\r\nconst colors = require(\"colors\")\r\n\r\nconst { readFileSync, writeFileSync } = require(\"fs\")\r\nconst pkg = JSON.parse(\r\n  readFileSync(path.resolve(__dirname, \"..\", \"package.json\"))\r\n)\r\n\r\npkg.scripts.prepush = \"npm run test:prod && npm run build\"\r\npkg.scripts.commitmsg = \"commitlint -E HUSKY_GIT_PARAMS\"\r\n\r\nwriteFileSync(\r\n  path.resolve(__dirname, \"..\", \"package.json\"),\r\n  JSON.stringify(pkg, null, 2)\r\n)\r\n\r\n// Call husky to set up the hooks\r\nfork(path.resolve(__dirname, \"..\", \"node_modules\", \"husky\", \"lib\", \"installer\", 'bin'), ['install'])\r\n\r\nconsole.log()\r\nconsole.log(colors.green(\"Done!!\"))\r\nconsole.log()\r\n\r\nif (pkg.repository.url.trim()) {\r\n  console.log(colors.cyan(\"Now run:\"))\r\n  console.log(colors.cyan(\"  npm install -g semantic-release-cli\"))\r\n  console.log(colors.cyan(\"  semantic-release-cli setup\"))\r\n  console.log()\r\n  console.log(\r\n    colors.cyan('Important! Answer NO to \"Generate travis.yml\" question')\r\n  )\r\n  console.log()\r\n  console.log(\r\n    colors.gray(\r\n      'Note: Make sure \"repository.url\" in your package.json is correct before'\r\n    )\r\n  )\r\n} else {\r\n  console.log(\r\n    colors.red(\r\n      'First you need to set the \"repository.url\" property in package.json'\r\n    )\r\n  )\r\n  console.log(colors.cyan(\"Then run:\"))\r\n  console.log(colors.cyan(\"  npm install -g semantic-release-cli\"))\r\n  console.log(colors.cyan(\"  semantic-release-cli setup\"))\r\n  console.log()\r\n  console.log(\r\n    colors.cyan('Important! Answer NO to \"Generate travis.yml\" question')\r\n  )\r\n}\r\n\r\nconsole.log()\r\n"]}